import matplotlib.pyplot as plt
import numpy as np
from torch.utils.data import DataLoader
from torch.utils.data import Dataset
import torch


# creat seasonal dataset
def create_seasonal_set(pastyear,pastday,seasonal_data,start_index,end_index): 
    X=np.zeros((end_index-start_index,pastyear+pastday))
    Y=np.zeros((end_index-start_index,1))
    for i in range(start_index,end_index):  
        Y[i-start_index]=seasonal_data[i]
        for j in range(pastyear):  
            X[i-start_index,j]= seasonal_data[i-(pastyear-j)*365]
        X[i-start_index,pastyear:pastyear+pastday]=seasonal_data[i-pastday:i]
    return X,Y

#seasonal model
class Regressor(torch.nn.Module):
    def __init__(self, pastyear, pastday,rnn_input_size=1,
                 rnn1_hidden_1=128,rnn1_output_size=1,rnn1_num_layers=1,
                 rnn2_hidden_1=128,rnn2_output_size=1,rnn2_num_layers=1,
                 inte_hidden=3):
        super(Regressor, self).__init__()
        
        self.pastyear=pastyear
        self.pastday=pastday
        
        self.rnn_input_size = rnn_input_size
        
        self.rnn1_hidden_1 = rnn1_hidden_1
        self.rnn1_output_size = rnn1_output_size
        self.rnn1_num_layers = rnn1_num_layers
        
        self.rnn2_hidden_1 = rnn2_hidden_1
        self.rnn2_output_size = rnn2_output_size
        self.rnn2_num_layers = rnn2_num_layers
        
        self.gru1_l1 = torch.nn.GRU(input_size = self.rnn_input_size,
                                hidden_size = self.rnn1_hidden_1,
                                num_layers=self.rnn1_num_layers,batch_first=True)
        
        self.fc1 = torch.nn.Linear(self.rnn1_hidden_1, self.rnn1_output_size)
        
        self.gru2_l1 = torch.nn.GRU(input_size = self.rnn_input_size,
                                hidden_size = self.rnn2_hidden_1,
                                num_layers=self.rnn2_num_layers,batch_first=True)
        
        self.fc2 = torch.nn.Linear(self.rnn2_hidden_1, self.rnn2_output_size)
        
        self.inte1 = torch.nn.Linear(2,inte_hidden)
        
        self.inte2 = torch.nn.Linear(inte_hidden,1)

    def forward(self, input):
        
        self.batch_size = input.shape[0]
        
        input_rnn1 = input[:,0:self.pastyear].view(self.batch_size,self.pastyear,1)
        input_rnn2 = input[:,self.pastyear:self.pastyear+self.pastday].view(self.batch_size,self.pastday,1)
        
        hidden_11 = torch.randn(self.rnn1_num_layers,self.batch_size,self.rnn1_hidden_1)
        hidden_21 = torch.randn(self.rnn2_num_layers,self.batch_size,self.rnn2_hidden_1)

        output_1, hidden_1 = self.gru1_l1(input_rnn1, hidden_11)
        output_rnn1 = torch.nn.functional.leaky_relu(self.fc1(hidden_1), negative_slope=0.1)
        output_rnn1 = output_rnn1.view(self.batch_size,-1)
        
        output_2, hidden_2 = self.gru2_l1(input_rnn2, hidden_21)
        output_rnn2 = torch.nn.functional.leaky_relu(self.fc2(hidden_2), negative_slope=0.1)
        output_rnn2 = output_rnn2.view(self.batch_size,-1)
        
        final_tensor=torch.cat([output_rnn1,output_rnn2],dim=1)
        final_tensor=torch.nn.functional.leaky_relu(self.inte1(final_tensor), negative_slope=0.1)
        final_tensor = torch.nn.functional.leaky_relu(self.inte2(final_tensor), negative_slope=0.1)
       
        return  final_tensor

class RainTrainDataset(Dataset):
    def __init__(self,X_train,Y_train):

        self.input = torch.from_numpy(X_train) 
        self.output = torch.from_numpy(Y_train)  
    
    def __getitem__(self, index):
        return self.input[index], self.output[index]

    def __len__(self):
        return len(self.input)
    
    
def seasonal_learning(seasonal_data,test_size,vali_size=1297, pastyear=3,pastday=4):
    
    train_start_index = pastyear*365+pastday  
    train_end_index = len(seasonal_data)-test_size-vali_size
    seasonal_train_X, seasonal_train_Y = create_seasonal_set(pastyear,pastday,seasonal_data,train_start_index,train_end_index)
    valid_start_index = len(seasonal_data)-test_size-vali_size
    valid_end_index = len(seasonal_data)-test_size
    seasonal_valid_X, seasonal_valid_Y = create_seasonal_set(pastyear,pastday,seasonal_data,valid_start_index,valid_end_index)
    # creat seasonal test set
    test_start_index = len(seasonal_data)-test_size
    test_end_index = len(seasonal_data)
    seasonal_test_X, seasonal_test_Y = create_seasonal_set(pastyear,pastday,seasonal_data,test_start_index,test_end_index)

    regressor = Regressor(pastyear, pastday)
    
    trainset = RainTrainDataset(seasonal_train_X, seasonal_train_Y)
    trainloader = DataLoader(trainset, batch_size=128, shuffle=False)
    
    criterion = torch.nn.MSELoss()  
    optimizer = torch.optim.Adam(regressor.parameters(), lr=0.001)
    
    trainset_tensor=torch.from_numpy(seasonal_train_X)
    traintar_tensor=torch.from_numpy(seasonal_train_Y)
    #print(seasonal_valid_X)
    #print(seasonal_valid_Y)
    validset_tensor=torch.from_numpy(seasonal_valid_X)
    validtar_tensor=torch.from_numpy(seasonal_valid_Y)
    testset_tensor=torch.from_numpy(seasonal_test_X)
    testtar_tensor=torch.from_numpy(seasonal_test_Y)
    
    N_EPOCHS=80
    train_MSEloss=[]
    valid_MSEloss=[]
    for epoch in range(1, N_EPOCHS+1):
        print(" %d epoch ... " % epoch)
        for i, (hist, target) in enumerate(trainloader, 1):   
        
            output = regressor(hist.float()) 
            output= output.view(-1,1)
            target=target.float()
            loss = criterion(output, target)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
        with torch.no_grad():
            train_output = regressor(trainset_tensor.float())  
            train_target=traintar_tensor.float()
            train_MSE = criterion(train_output, train_target)
            train_MSEloss.append(train_MSE.item())
            #print(train_MSE.item())
            valid_output = regressor(validset_tensor.float())  
            valid_target=validtar_tensor.float()
            valid_MSE = criterion(valid_output, valid_target)
            valid_MSEloss.append(valid_MSE.item())
            #print(valid_MSE.item())
    print("testing seasonal model……")
    with torch.no_grad():
        test_output = regressor(testset_tensor.float())  
        print(test_output.shape)
        test_target=testtar_tensor.float()
        test_MSE = criterion(test_output, test_target)
        test_R2= 1-test_MSE.item()/np.var(seasonal_test_Y)
        print(f'Test set MSE: {test_MSE}')
        print(f'Test set R2: {test_R2}')
        test_pred = test_output.numpy()
    
    plt.figure(3)
    plt.scatter(test_pred,seasonal_test_Y, marker = '+', color = 'blue', s = 40)
    plt.plot(np.array([-10,100]),np.array([-10,100]))
    plt.xlabel('pred')
    plt.ylabel('true')
    
    return test_pred,test_R2  , train_MSEloss, valid_MSEloss
