import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import numpy as np
from tensorflow.keras.layers import GRU
from sklearn.metrics import r2_score
from tensorflow import keras
from sklearn.metrics import mean_squared_error

class LossHistory(keras.callbacks.Callback):
    def on_train_begin(self, logs={}):
        self.losses = {'batch':[], 'epoch':[]}
        self.val_loss = {'batch':[], 'epoch':[]}

    def on_batch_end(self, batch, logs={}):
        self.losses['batch'].append(logs.get('loss'))
        self.val_loss['batch'].append(logs.get('val_loss'))

    def on_epoch_end(self, batch, logs={}):
        self.losses['epoch'].append(logs.get('loss'))
        self.val_loss['epoch'].append(logs.get('val_loss'))


def trend_learning(trend,test_size,trend_step=3):
    dataX, dataY = [], []
    for i in range(len(trend) - trend_step):
        a = trend[i:(i + trend_step)]
        dataX.append(a)
        dataY.append(trend[i + trend_step])
    dataX=np.array(dataX)
    dataY=np.array(dataY)    
    train_size = dataX.shape[0]-test_size
    valid_size = int(train_size*2/9)
    X_train = dataX[0:train_size-valid_size,]
    X_valid = dataX[train_size-valid_size:train_size,]
    X_test = dataX[train_size:,]
    Y_train = dataY[0:train_size-valid_size]
    Y_valid = dataY[train_size-valid_size:train_size]
    Y_test = dataY[train_size:]
    X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
    X_valid = np.reshape(X_valid, (X_valid.shape[0], 1, X_valid.shape[1]))
    X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))
    Y_train = np.reshape(Y_train, (Y_train.shape[0], 1))
    Y_valid = np.reshape(Y_valid, (Y_valid.shape[0], 1))
    Y_test= np.reshape(Y_test, (Y_test.shape[0], 1))
    model = Sequential([
            GRU(64, activation='elu', return_sequences = True, input_shape=(X_train.shape[1], X_train.shape[2])),
            GRU(32, activation='elu'),
            Dense(1, activation='relu')
                ])
    model.compile(loss = "mean_squared_error", optimizer = 'adam')
    history = LossHistory()
    model.fit(X_train, Y_train, epochs=40, batch_size=128, verbose=2,validation_data=(X_valid,Y_valid),callbacks=[history])
    model.save('weather.h5')
    Y_predict = model.predict(X_test)
    Y_valid_predict = model.predict(X_valid)
    R2_valid = r2_score(Y_valid, Y_valid_predict)
    train_MSEloss = history.losses['epoch']
    valid_MSEloss = history.val_loss['epoch']
    # plot data
    plt.figure(2)
    plt.scatter(Y_predict,Y_test,marker = '+', color = 'blue', s = 40)
    plt.plot(np.array([0,10]),np.array([0,10]))
    plt.xlabel('pred')
    plt.ylabel('true')
    return Y_predict,r2_score(Y_test, Y_predict),mean_squared_error(Y_test, Y_predict) #,train_MSEloss,valid_MSEloss,R2_valid
