import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from statsmodels.tsa.seasonal import STL
from trend_function import trend_learning
from seasonal_function import seasonal_learning
from residual_function import residual_learning
from sklearn.metrics import accuracy_score,confusion_matrix,r2_score,f1_score
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa import stattools

# 1、load data
data=pd.read_csv(r'C:\Users\lenovo\Desktop\31010.csv',header=0)  
data_np=data.to_numpy()
data_np=data_np[:,1:-1].astype(float)  #去掉日期戳和降雨戳，其他全都要
rain_data = data["daily_rain"].to_numpy().reshape(-1, 1)

test_size=730
rain_data_train = rain_data[0:-test_size]
rain_data_test = rain_data[-test_size:] 


res = STL(rain_data,period = 365).fit()
res.plot()


trend=res.trend
seasonal=res.seasonal
residual=res.resid

#seaacf=stattools.acf(seasonal[0:-test_size],nlags=3000) 
#plot_acf(seasonal[0:-test_size],lags=2555)
#plt.show()
#plot_acf(seasonal[0:-test_size],lags=100)
#plt.show()


trend_test_pred,r2_trend_test,MSE_trend_test = trend_learning(trend,test_size)
seasonal_test_pred,r2_seasonal_test, seasonal_train_MSEloss, seasonal_valid_MSEloss = seasonal_learning(seasonal,test_size)
residual_test_pred,r2_residual_test = residual_learning_1(residual,test_size,data_np)

total_test_pred=trend_test_pred+seasonal_test_pred+residual_test_pred 

total_pred_list=total_test_pred.reshape(-1,).tolist()
total_pred_scale=[]
for i in range(len(total_test_pred)):
    total_pred_scale.append(max(total_pred_list[i],0))
total_pred_scale = np.array(total_pred_scale)

test_grtruth=rain_data[-test_size:]

plt.figure(10)
plt.plot(test_grtruth)
plt.plot(total_pred_scale)

plt.figure(11)
plt.scatter(total_pred_scale, test_grtruth,marker = '+', color = 'blue', s = 40)
plt.plot(np.array([0,175]),np.array([0,175]))
plt.xlabel('pred')
plt.ylabel('true')

print('Total Test set R2:', r2_score(test_grtruth,total_pred_scale))

def class_result(low,up,true,pred):
    true_class=np.zeros((len(true),))
    pred_class=np.zeros((len(pred),))
    for i in range(len(true)):
        if true[i]>low and true[i]<up:
            true_class[i]=1
        elif true[i]>up  or true[i]==up:
            true_class[i]=2
    for i in range(len(pred)):
        if pred[i]>low and pred[i]<up:
            pred_class[i]=1
        elif pred[i]>up or true[i]==up:
            pred_class[i]=2
    return true_class,pred_class       

true_class, pred_class = class_result(3.5,31.6,test_grtruth,total_pred_scale)

print('Total Test set accuracy:',accuracy_score(true_class,pred_class))
print('Total Test set confusion matrix:',confusion_matrix(true_class,pred_class))
print('Total Test set f1_score:',f1_score(true_class,pred_class,average='micro'))
